<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sistema de Videovigilancia from Scratch</title><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/" rel="alternate"></link><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/feeds/Overviews.atom.xml" rel="self"></link><id>http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/</id><updated>2013-03-02T00:00:00+00:00</updated><entry><title>BSD sockets</title><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/bsd-sockets.html" rel="alternate"></link><updated>2013-03-02T00:00:00+00:00</updated><author><name>Jesús Torres</name></author><id>tag:ull-etsii-sistemas-operativos.github.com/videovigilancia-blog,2013-03-02:bsd-sockets.html</id><summary type="html">&lt;p&gt;&lt;em&gt;POSIX sockets&lt;/em&gt; es una parte de la especificación POSIX&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; que define un API
(Application Programming Interface) para la comunicación entre procesos,
fundamentalmente entre equipos conectados a través de Internet
(&lt;em&gt;socket&lt;/em&gt; de Internet), aunque también soporta la conexión local entre procesos
que se ejecutan en el mismo sistema (&lt;a href="http://es.wikipedia.org/wiki/Socket_Unix"&gt;socket de dominio UNIX&lt;/a&gt;
o &lt;a href="http://es.wikipedia.org/wiki/Socket_Unix"&gt;socket UNIX&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Historia&lt;/h2&gt;
&lt;p&gt;La primera implementación ampliamente distribuida de la pila de protocolos
TCP/IP lo fue con el UNIX 4.2BSD, que incluía &lt;em&gt;BSD sockets&lt;/em&gt; (o &lt;em&gt;Berkeley sockets&lt;/em&gt;)
como API para las comunicaciones entre procesos usando estos protocolos.&lt;/p&gt;
&lt;p&gt;Las distintas versiones de BSD incorporaban código del UNIX original de AT&amp;amp;T,
por lo que estaban sujetas a la licencia de software de esta empresa. La
licencias de código fuente se estaban volviendo muy costosas, por lo que muchas
empresas y organizaciones comenzaron a interesarse en la liberación independiente
del código de red, que había sido desarrollado enteramente al margen de AT&amp;amp;T,
por lo que no tenía que estar sujeto a los requerimientos de su licencia.&lt;/p&gt;
&lt;p&gt;En junio de 1989 este código fue liberado bajo los términos de la licencia
&lt;a href="http://es.wikipedia.org/wiki/Licencia_BSD"&gt;BSD&lt;/a&gt;. Muchos fabricantes incluyeron
este código directamente en sus propios sistemas, incluso aunque tuvieran sus
propios protocolos propietarios con los que competían entre ellos. Y algunas
compañías comenzaron a usarlo para vender pilas de protocolo TCP/IP para
Windows, hasta que Microsoft incluyó la suya propia en Windows 95, también
derivada del código de BSD.&lt;/p&gt;
&lt;p&gt;Todo esto alimentó el despegue de TCP/IP como protocolo dominante e impuso
los &lt;em&gt;BSD sockets&lt;/em&gt; como API de acceso a la red, de tal forma que hoy en día
todos los sistemas operativos modernos tienen una implementación de &lt;em&gt;BSD
sockets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El API &lt;em&gt;BSD sockets&lt;/em&gt; evolucionó y finalmente fue adoptado en el estándar
POSIX&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, donde algunas funciones fueron deprecadas y eliminadas y
reemplazadas por otras. Aun así el API &lt;em&gt;POSIX sockets&lt;/em&gt; es básicamente el
&lt;em&gt;BSD sockets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De la misma manera los sistemas Windows incluyen &lt;a href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms740673(v=vs.85).aspx" title="Windows Sockets API"&gt;Winsock&lt;/a&gt;, un API de acceso a
la red derivado de &lt;em&gt;BSD sockets&lt;/em&gt; que sólo difiere de éste en unos
&lt;a href="http://tangentsoft.net/wskfaq/articles/bsd-compatibility.html"&gt;pocos detalles&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Funciones del API&lt;/h2&gt;
&lt;p&gt;Este es un resumen de las funciones proporcionadas por &lt;em&gt;POSIX sockets&lt;/em&gt;:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Crea un nuevo &lt;em&gt;socket&lt;/em&gt;, identificado por un número entero, de cierto tipo y
reserva recursos del sistema para él.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa generalmente en el lado del servidor para asociar un &lt;em&gt;socket&lt;/em&gt; con una
dirección de red, por ejemplo una dirección IP y un puerto concretos.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa en el lado del servidor para hacer que un &lt;em&gt;socket&lt;/em&gt; TCP entre en modo
de escucha a la espera de nuevas conexiones entrantes.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa en el lado del cliente para asignar un número de puerto libre al
&lt;em&gt;socket&lt;/em&gt;. En el caso de &lt;em&gt;sockets&lt;/em&gt; TCP, intenta establecer una nueva conexión TCP
con un &lt;em&gt;socket&lt;/em&gt; a la escucha en otro puerto y dirección IP.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa en el lado del servidor para aceptar una conexión entrante e intentar
crear una nueva conexión TCP con el cliente remoto. Si tiene éxito, crea un
nuevo socket asociado con esta pareja concreta de direcciones en ambos
extremos de la conexión.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;send()&lt;/code&gt; y &lt;code&gt;recv()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt; y &lt;code&gt;read()&lt;/code&gt; o &lt;code&gt;sendto()&lt;/code&gt; y &lt;code&gt;recvfrom()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usan para enviar y recibir datos hacia y desde el otro extremo de la conexión.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Hace que el sistema libere los recursos asignados al &lt;em&gt;socket&lt;/em&gt;. En el caso
de conexiones TCP, ésta es finalizada.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt; y &lt;code&gt;getnameinfo()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usan para resolver nombres de máquina y direcciones IP (&lt;a href="http://es.wikipedia.org/wiki/Domain_Name_System" title="DNS - Domain Name System"&gt;DNS&lt;/a&gt;).&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa para esperar a que uno o más &lt;em&gt;sockets&lt;/em&gt; de una lista estén listos
para leer, escribir o tengan algún error.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;poll()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa para comprobar el estado de un &lt;em&gt;socket&lt;/em&gt; en un conjunto de &lt;em&gt;sockets&lt;/em&gt;.
Puede comprobar si están listos para escribir, leer o si ha ocurrido algún error.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;getsockopt()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa para recuperar el valor actual de una opción concreta de configuración
del &lt;em&gt;socket&lt;/em&gt; especificado.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;setsockopt()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Se usa para cambiar el actual de una opción concreta de configuración del
&lt;em&gt;socket&lt;/em&gt; especificado.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;POSIX API en Boost.Asio&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; es una librería de C++ para programadores de software de sistema
donde el acceso a funcionalidades del sistema operativo; como la red, los archivos,
un puerto serie, etc.; se requiere con cierta frecuencia. El acceso a estos recursos
suele implicar operaciones de E/S que normalmente consumen mucho tiempo antes
de completarse, por lo que &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; provee de herramientas para gestionar
estas conexiones de manera asíncrona, sin necesitar modelos de concurrencia
basados en hilos o en múltiples procesos y memoria compartida.&lt;/p&gt;
&lt;p&gt;Debido a que uno de los usos principales de esta librería son las comunicaciones
por red, &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; incluye una interfaz multiplataforma de &lt;em&gt;sockets&lt;/em&gt; de bajo nivel,
basada en el API &lt;em&gt;BSD sockets&lt;/em&gt;, e implementada sobre la que proporciona el propio
sistema operativo.&lt;/p&gt;
&lt;p&gt;A diferencia de esta última, la implementación proporcionada por &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; no incluye
algunos aspectos del API original que no son seguros o que son propensos a provocar
errores de programación. Por ejemplo, el uso de &lt;code&gt;int&lt;/code&gt; para identificar a los &lt;em&gt;sockets&lt;/em&gt;
por parte del API &lt;em&gt;BSD sockets&lt;/em&gt; carece de la seguridad que nos ofrecería tener un
tipo específico para ellos. Por eso la representación de un &lt;em&gt;socket&lt;/em&gt; en &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; usa
un tipo distinto para cada protocolo. Es decir, para TCP el tipo de un socket es
&lt;code&gt;ip::tcp::socket&lt;/code&gt; mientras para UDP el tipo es &lt;code&gt;ip::udp::socket&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En la documentación de &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt; se incluye una &lt;a href="http://www.boost.org/doc/html/boost_asio/overview/networking/bsd_sockets.html"&gt;tabla&lt;/a&gt;
que muestra la relación entre el API &lt;em&gt;BSD socket&lt;/em&gt; y el API de acceso a red de &lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt;:&lt;/p&gt;
&lt;h2&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Berkeley_sockets"&gt;BSD sockets - Wikipedia&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/es-es/library/windows/desktop/ms740673(v=vs.85).aspx"&gt;Wnsock - Windows Sockets API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tangentsoft.net/wskfaq/articles/bsd-compatibility.html"&gt;Winsock Programmer's FAQ - BSD Sockets Compatibility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.boost.org/libs/asio/" title="Boost.Asio"&gt;Boost.Asio&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;POSIX son las siglas de Portable Operating System Interface, una familia
de estándares especificados por el &lt;a href="http://www.ieee.org/"&gt;IEEE&lt;/a&gt; para mantener
la compatibilidad entre sistemas operativos. POSIX define un API, tomando del
de los sistemas UNIX, para asegurar la compatibilidad entre las distintas
variantes de UNIX y otros sistemas operativos.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="sockets"></category><category term="POSIX"></category><category term="comunicaciones"></category></entry><entry><title>Protocol Buffers</title><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/protocol-buffers.html" rel="alternate"></link><updated>2013-03-02T00:00:00+00:00</updated><author><name>Jesús Torres</name></author><id>tag:ull-etsii-sistemas-operativos.github.com/videovigilancia-blog,2013-03-02:protocol-buffers.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; es una herramienta para la serialización&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; de estructuras de
datos.&lt;/p&gt;
&lt;p&gt;Básicamente provee una manera sencilla de definir la estructura de los datos,
pudieron entonces generar código capaz de leer y escribir dichos datos de
manera eficiente, desde diferentes lenguajes y en una variedad de distintos
tipos de flujos de datos.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; fue desarrollado internamente por Google para almacenar
e intercambiar todo tipo de información estructurada. Hasta el punto de que
sirve de base para un sistema de &lt;a href="http://es.wikipedia.org/wiki/Remote_Procedure_Call"&gt;llamada a procedimiento remoto&lt;/a&gt;
o &lt;a href="http://es.wikipedia.org/wiki/Remote_Procedure_Call" title="Llamada a Procedimiento Remoto"&gt;RPC&lt;/a&gt; (Remote Procedure Call) propio que es usado prácticamente para
todas las comunicaciones entre equipos en Google.&lt;/p&gt;
&lt;p&gt;En su momento Google hizo generadores de código de &lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; para
C++, Java y Python y liberó la herramienta con una licencia
&lt;a href="http://es.wikipedia.org/wiki/Licencia_BSD"&gt;BSD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La idea detrás de &lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; es muy similar a la que dio origen a
&lt;a href="http://en.wikipedia.org/wiki/XML" title="XML"&gt;XML&lt;/a&gt;, solo que en este caso el formato es binario, compacto y pone énfasis
en la velocidad a la hora de serializar&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; y deserializar los datos. Además
es muy similar a &lt;a href="http://en.wikipedia.org/wiki/Apache_Thrift" title="Apache Thrift"&gt;Apache Thrift&lt;/a&gt; (creado y usado internamente por Facebook)
o &lt;a href="http://en.wikipedia.org/wiki/Apache_Avro" title="Apache Avro"&gt;Apache Avro&lt;/a&gt;, excepto porque &lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; no define un protocolo
&lt;a href="http://es.wikipedia.org/wiki/Remote_Procedure_Call" title="Llamada a Procedimiento Remoto"&gt;RPC&lt;/a&gt; concreto, sino sólo como deben empaquetarse los datos.&lt;/p&gt;
&lt;p&gt;Si se quiere definir un servicio &lt;a href="http://es.wikipedia.org/wiki/Remote_Procedure_Call" title="Llamada a Procedimiento Remoto"&gt;RPC&lt;/a&gt; que haga uso de un protocolo que se
apoye sobre &lt;a href="http://code.google.com/p/protobuf/" title="Protocol buffers - Google's data interchange format"&gt;Protocol Buffers&lt;/a&gt; para el intercambio de datos, existen
&lt;a href="http://code.google.com/p/protobuf/wiki/ThirdPartyAddOns#RPC_Implementations"&gt;diversas implementaciones RPC&lt;/a&gt;
para distintos lenguajes de programación.&lt;/p&gt;
&lt;h2&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/protobuf/"&gt;protobuf - Protocol Buffers - Google's data interchange format&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/protocol-buffers/"&gt;Protocol Buffers - Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Protocol_Buffers"&gt;Wikipedia&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;La serialización es un proceso de codificación de un objeto en un medio
de almacenamiento (como puede ser una archivo o un buffer en memoria), en
ocasiones para transmitirlo a través de una conexión de red o para preservarlo
entre ejecuciones de un programa. La serie de bytes que codifican el estado
del objeto tras la serialización puede ser usada para crear un nuevo objeto,
idéntico al original, tras aplicar el proceso inverso de deserialización.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="protobuf"></category><category term="serialización"></category></entry><entry><title>Proyecto Qt. Framework de desarrollo de aplicaciones</title><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/proyecto-qt-framework-de-desarrollo-de-aplicaciones.html" rel="alternate"></link><updated>2013-01-29T00:00:00+00:00</updated><author><name>Jesús Torres</name></author><id>tag:ull-etsii-sistemas-operativos.github.com/videovigilancia-blog,2013-01-29:proyecto-qt-framework-de-desarrollo-de-aplicaciones.html</id><summary type="html">&lt;p&gt;&lt;a href="http://qt-project.org/" title="Qt Proyect"&gt;Qt&lt;/a&gt; es una &lt;em&gt;framework&lt;/em&gt; multiplataforma en C++ de desarrollo de aplicaciones. Se
utiliza fundamentalmente para desarrollar aplicaciones con interfaz gráfica,
gracias al conjunto de controles independientes de la plataforma que ofrece,
aunque también es usado para crear herramientas de linea de comando o consolas
de gestión para servicios.&lt;/p&gt;
&lt;p&gt;Esto último es debido a que el API de la librería cuenta con clases para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceso a bases de datos mediante SQL.&lt;/li&gt;
&lt;li&gt;Procesamiento de XML.&lt;/li&gt;
&lt;li&gt;Gestión de hilos.&lt;/li&gt;
&lt;li&gt;Comunicaciones por red.&lt;/li&gt;
&lt;li&gt;Manejo de archivos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a parte de las clases ya mencionadas para el desarrollo de aplicaciones con
interfaz gráfica. Todo esto convierte a &lt;a href="http://qt-project.org/" title="Qt Proyect"&gt;Qt&lt;/a&gt; en un &lt;em&gt;framework&lt;/em&gt; muy valorado a la
hora de desarrollar aplicaciones multiplataforma en C++.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://qt-project.org/" title="Qt Proyect"&gt;Qt&lt;/a&gt; está disponible para sistemas tipo UNIX (Linux, BSD, UNIX, etc.) con
servidor gráfico X Window System, Apple Mac OS X, Microsoft Windows y sistemas
Linux embebidos. Además se puede hacer uso de la librería desde lenguajes
diferentes a C++ gracias al empleo de &lt;a href="http://es.wikipedia.org/wiki/Bindings"&gt;bindings&lt;/a&gt;:
Python, Java, Ruby, Ada, Pascal, Perl, PHP, Haskell, Lua, D, .NET, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://qt-project.org/" title="Qt Proyect"&gt;Qt&lt;/a&gt; está disponible bajo licencias GPLv3, LGPLv2 y privativa comercial.&lt;/p&gt;
&lt;h2&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://qt-project.org/"&gt;Qt Proyect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Qt_(framework)"&gt;Wikipedia&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="qt"></category><category term="gui"></category></entry><entry><title>Yocto, Poky y BitBake</title><link href="http://ull-etsii-sistemas-operativos.github.com/videovigilancia-blog/yocto-poky-y-bitbake.html" rel="alternate"></link><updated>2013-01-10T00:00:00+00:00</updated><author><name>Jesús Torres</name></author><id>tag:ull-etsii-sistemas-operativos.github.com/videovigilancia-blog,2013-01-10:yocto-poky-y-bitbake.html</id><summary type="html">&lt;p&gt;El proyecto &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt; proporciona a los desarrolladores de sistemas empotrados
Linux un punto de partida para generar distribuciones personalizadas para
sus productos. Una de las piezas clave del proyecto es el sistema de
construcción &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt;, que a su vez se apoya en &lt;a href="http://en.wikipedia.org/wiki/BitBake" title="BitBake"&gt;BitBake&lt;/a&gt;, una herramienta de
construcción de paquetes al estilo de
&lt;a href="http://es.wikipedia.org/wiki/Portage_(software)"&gt;Portage&lt;/a&gt; de
&lt;a href="http://www.gentoo.org/"&gt;Gentoo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;El proyecto Yocto&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt; está financiado por la &lt;a href="http://www.linuxfoundation.org/"&gt;Linux Foundation&lt;/a&gt;.
Su principal objetivo es desarrollar herramientas que ayuden a los desarrolladores
a crear sus propias distribuciones de Linux, sea cual sea el hardware sobre el que
van a correr. Entre los proyectos desarrollados en el seno de &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt; están:
el sistema de construcción &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt;, el sistema de
&lt;a href="http://es.wikipedia.org/wiki/Integraci%C3%B3n_continua"&gt;integración continua&lt;/a&gt;
&lt;a href="http://autobuilder.yoctoproject.org/"&gt;Autobuiler&lt;/a&gt; y la librería de sistema
&lt;a href="http://www.eglibc.org/"&gt;Embedded GLIBC (EGLIBC)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Además, cuando se crea una distribución con &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt;, la herramienta de construcción
crea un SDK de desarrollo de aplicaciones adaptado a dicha distribución. Este
SDK puede conectarse al IDE &lt;a href="http://www.eclipse.org/" title="Eclipse IDE"&gt;Eclipse&lt;/a&gt; o puede usarse desde la línea de comandos.&lt;/p&gt;
&lt;h2&gt;El sistema de construcción Poky&lt;/h2&gt;
&lt;p&gt;Uno de los componentes centrales de &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt; es el sistema de construcción &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt;.
Su responsabilidad fundamental es la construcción de imágenes de sistemas de
archivos de sistemas Linux. Estos pueden incluir diferentes productos de software:
Linux, X11, Matchbox, GTK+, Pimlico, Clutter, D-BUS, etc.&lt;/p&gt;
&lt;p&gt;Aunque se pueden generar diferentes tipos de imágenes según el dispositivo donde
va a ser almacenada, el proyecto ejemplo estándar lo hace para el emulador &lt;a href="http://wiki.qemu.org/" title="QEMU"&gt;QEMU&lt;/a&gt;
y para placas de referencia reales de los fabricantes, para cada una de las
arquitecturas soportadas. Esta habilidad de &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt; lo hace especialmente
apropiado como plataforma de pruebas y de desarrollo de software para empotrados.&lt;/p&gt;
&lt;p&gt;Un proyecto similar a &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt; es &lt;a href="http://www.openembedded.org/" title="OpenEmbedded"&gt;OpenEmbedded&lt;/a&gt;, que también es un sistema de construcción
para sistemas Linux empotrados. &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt; deriva de un proyecto para crear
una rama estabilizada de &lt;a href="http://www.openembedded.org/" title="OpenEmbedded"&gt;OpenEmbedded&lt;/a&gt;, limitando el software disponible a unos
pocos paquetes, de entre los miles de los que dispone &lt;a href="http://www.openembedded.org/" title="OpenEmbedded"&gt;OpenEmbedded&lt;/a&gt;, así como el número
de arquitecturas soportadas. Con el tiempo esta rama evolucionó añadiendo
el componente de &lt;a href="http://www.eclipse.org/" title="Eclipse IDE"&gt;Eclipse&lt;/a&gt; y la generación de imágenes para &lt;a href="http://wiki.qemu.org/" title="QEMU"&gt;QEMU&lt;/a&gt;, entre otras cosas.
Esto dio origen a &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El núcleo central de &lt;a href="http://www.pokylinux.org/" title="Poky Plataform Builder"&gt;Poky&lt;/a&gt; es la herramienta de construcción &lt;a href="http://en.wikipedia.org/wiki/BitBake" title="BitBake"&gt;BitBake&lt;/a&gt; junto
con una colección de archivos de configuración de diversos tipos que definen
todo lo necesario para construir la imagen del sistema Linux.&lt;/p&gt;
&lt;h2&gt;La herramienta de construcción BitBake&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/BitBake" title="BitBake"&gt;BitBake&lt;/a&gt; es básicamente un ejecutor de tareas. Su función es leer los archivos
de configuración que definen el proyecto; establecer que tareas deben ser realizadas
y en que orden, obviamente en función de las dependencias y para maximizar la eficiencia
(por ejemplo primero se intentan ejecutar las que son dependencias comunes a otras tareas)
y finalmente ejecutarlas.&lt;/p&gt;
&lt;p&gt;Los tipos de archivos de configuración que maneja &lt;a href="http://en.wikipedia.org/wiki/BitBake" title="BitBake"&gt;BitBake&lt;/a&gt; son:&lt;/p&gt;
&lt;dl&gt;
 &lt;dt&gt;Recetas (.bb)&lt;/dt&gt;
 &lt;dd&gt;Contienen información acerca de un componente de software concreto. Entre
 dicha información, por ejemplo, podemos destacar: desde donde descargar los
 parches para las fuentes, que configuraciones deben ser aplicadas antes de
 la compilación, como se compila el componente y como se empaqueta el resultado.&lt;/dd&gt;
 &lt;dt&gt;Clases (.bbclass)&lt;/dt&gt;
 &lt;dd&gt;Contienen información que es interesante compartir entre distintas recetas.
 Por ejemplo la clase **autotools**, que contiene configuraciones comunes para
 cualquier aplicación que utiliza la herramienta **autotools**.&lt;/dd&gt;
 &lt;dt&gt;Configuraciones (.conf)&lt;/dt&gt;
 &lt;dd&gt;Define diversas variables de configuración que controlan lo que Poky va
 a hacer. Esto incluye configuraciones específicas de la maquina, opciones de
 configuración de la distribución, ajustes del compilador, configuraciones de
 usuario, etc.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/BitBake" title="BitBake"&gt;BitBake&lt;/a&gt; puede combinar varios de estos archivos en los se denomina como &lt;strong&gt;capas&lt;/strong&gt;.
Una capa es un agrupamiento de recetas que proporciona algún tipo de funcionalidad
adicional. Pueden ser un &lt;a href="http://en.wikipedia.org/wiki/Board_support_package" title="Board Support Package"&gt;BSP&lt;/a&gt; para un nuevo dispositivo, tipos de imágenes
adicionales o software no incluido en Poky.&lt;/p&gt;
&lt;p&gt;Los mismos metadatos principales del proyecto &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt;, &lt;strong&gt;meta-yocto&lt;/strong&gt;, son por si
mismos una capa aplicada sobre la capa de metadatos OE-Core que añade software
adicional y tipos de imágenes a esta última.&lt;/p&gt;
&lt;p&gt;Un ejemplo de como funciona esto se puede ver al crear un dispositivo &lt;a href="http://es.wikipedia.org/wiki/Network-attached_storage" title="Network-attached storage"&gt;NAS&lt;/a&gt;
(Network-attached Storage) para la CPU Intel E660
(&lt;a href="http://www.intel.com/p/es_XL/embedded/hwsw/hardware/atom-e6xx/overview"&gt;Crown Bay&lt;/a&gt;)
usando x32, el nuevo &lt;a href="http://en.wikipedia.org/wiki/Application_binary_interface" title="Application binary interface"&gt;ABI&lt;/a&gt; nativo de 32 bits para procesadores x86-64:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;En el nivel más bajo colocaríamos una capa &lt;a href="http://en.wikipedia.org/wiki/Board_support_package" title="Board Support Package"&gt;BSP&lt;/a&gt; para Crown Bay que activaría
 funcionalidades específicas del hardware de estos procesadores.
 Esta capa, por ejemplo, incluiría los drivers de vídeo.&lt;/li&gt;
&lt;li&gt;Como queremos utilizar x32, añadiríamos posteriormente la capa &lt;strong&gt;meta-x32&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;La funcionalidad de &lt;a href="http://es.wikipedia.org/wiki/Network-attached_storage" title="Network-attached storage"&gt;NAS&lt;/a&gt; se incorporaría añadiendo la capa &lt;strong&gt;meta-bayron&lt;/strong&gt;,
 que el mismo proyecto &lt;a href="https://www.yoctoproject.org/" title="Yocto Project"&gt;Yocto&lt;/a&gt; nos ofrece como ejemplo.&lt;/li&gt;
&lt;li&gt;Finalmente incorporaríamos una capa, que imaginariamente llamaremos
 &lt;strong&gt;meta-myproject&lt;/strong&gt;, para proveer el software y la configuraciones necesarias
 para crear una interfaz gráfica de usuario de configuración del &lt;a href="http://es.wikipedia.org/wiki/Network-attached_storage" title="Network-attached storage"&gt;NAS&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Como hemos comentado, cada una de estas capas estaría formada por uno o más
archivos de configuración de los tipos indicados anteriormente.&lt;/p&gt;
&lt;h2&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.aosabook.org/en/yocto.html"&gt;The Yocto Proyect&lt;/a&gt;.
 &lt;a href="http://www.aosabook.org/"&gt;The Architecture of Open Source Applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.yoctoproject.org/wiki/FAQ"&gt;Yocto Proyect FAQ&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.yoctoproject.org/docs/1.0/poky-ref-manual/poky-ref-manual.html"&gt;Poky HandBook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="yocto"></category><category term="poky"></category><category term="bitbake"></category><category term="empotrado"></category><category term="linux"></category><category term="openembedded"></category></entry></feed>